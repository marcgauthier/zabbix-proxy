#version=RHEL9
# Kickstart for AlmaLinux + Zabbix Proxy Appliance Live ISO
# This file automates the entire installation, partitioning, network, and package setup.

# ================================
# 1) Installation Source & Locale
# ================================
# For live ISO creation, don't set display mode (text/graphical)
lang en_US.UTF-8              # System language
keyboard us                   # Keyboard layout
timezone UTC --utc            # Set system time to UTC

# ==================================
# 2) Network Configuration (DHCP)
# ==================================
# Activate all detected NICs with DHCP
network --bootproto=dhcp --device=link --activate --hostname=zabbix-proxy

# ================================
# 3) Installation Method
# ================================
# Use URL method for live ISO builds instead of cdrom
url --url="http://repo.almalinux.org/almalinux/9/BaseOS/x86_64/os/"
repo --name="AppStream" --baseurl="http://repo.almalinux.org/almalinux/9/AppStream/x86_64/os/"
repo --name="extras" --baseurl="http://repo.almalinux.org/almalinux/9/extras/x86_64/os/"

# ================================
# 4) Disk Partitioning
# ================================
# For live ISO, we need a simpler partitioning scheme
zerombr
clearpart --all --initlabel
# Create a simple partition layout
part / --fstype="ext4" --size=8192 --grow
part /data --fstype="ext4" --size=4096 --grow

# ================================
# 5) Authentication & Users
# ================================
rootpw --lock
user --name=zabbixlog --groups=wheel --password=changeme --plaintext

# ================================
# 6) Services
# ================================
services --enabled=NetworkManager,chronyd,firewalld
services --disabled=sshd

# ================================
# 7) Packages Section
# ================================
%packages
@^minimal-environment
@core
@standard

# Essential system packages
kernel
systemd
NetworkManager
firewalld
chrony

# Live system packages - REQUIRED for livemedia-creator
dracut-live
dracut-network
dracut-config-generic
live-media
syslinux
genisoimage
isomd5sum

# Database and web server
mariadb-server
httpd

# System tools
acl
bind-utils
wget
curl
tar
gzip
unzip

# Development tools for building if needed
gcc
make
rpm-build

# Remove unnecessary packages to save space
-@guest-agents
-@dial-up
-@input-methods
-@multimedia
-NetworkManager-*-plugin
-aic94xx-firmware*
-alsa-*
-btrfs-progs*
-dracut-network
-iprutils
-ivtv-firmware
-iwl*firmware
-libertas*firmware
-kexec-tools
-plymouth*
%end

# =====================================
# 8) Post-Install Customization Script
# =====================================
%post --log=/root/ks-post.log --interpreter=/bin/bash

# --- 8.1) Prepare /data directories and bind-mount /var/log
mkdir -p /data/logs /data/zabbix-pkgs /data/zabbix
# Persist bind-mount in fstab so /var/log â†’ /data/logs at every boot
cat >> /etc/fstab << 'FS'
/data/logs /var/log none bind 0 0
FS

# Create the logs directory structure
mkdir -p /data/logs/journal
chmod 755 /data/logs

# Move existing logs to /data/logs before bind mount
if [ -d /var/log ] && [ "$(ls -A /var/log 2>/dev/null)" ]; then
    cp -a /var/log/* /data/logs/ 2>/dev/null || true
fi

# Mount the bind mount
mount --bind /data/logs /var/log

# Ensure systemd-journald stores persistent logs
sed -i 's/#Storage=auto/Storage=persistent/' /etc/systemd/journald.conf

# --- 8.2) Create 'zabbixlog' user for read-only log access
# User already created above, just set ACLs
setfacl -m u:zabbixlog:rX /data/logs
setfacl -R -m d:u:zabbixlog:rX /data/logs

# --- 8.3) Create a first-boot script for interactive steps
cat > /root/firstboot.sh << 'EOF'
#!/bin/bash
# >>> FIRSTBOOT SCRIPT: runs once after first reboot <<<

echo "=== Zabbix Proxy Appliance First Boot Setup ==="

# 1) Prompt for 32-char PSK key and verify
while true; do
    read -s -p "Enter 32-character PSK key: " PSK
    echo
    read -s -p "Confirm PSK key: " PSK2
    echo
    if [[ "$PSK" == "$PSK2" && ${#PSK} -eq 32 ]]; then
        break
    fi
    echo "PSK mismatch or wrong length (must be exactly 32 characters). Please try again."
done

mkdir -p /data/zabbix
echo "$PSK" > /data/zabbix/psk.key
chmod 600 /data/zabbix/psk.key
chown root:root /data/zabbix/psk.key

# 2) Initialize and start MariaDB
echo "Starting MariaDB..."
systemctl enable mariadb
systemctl start mariadb

# Wait for MariaDB to be ready
sleep 5

# 2.1) Prompt for MySQL Zabbix user password
while true; do
    read -s -p "Enter MySQL password for user 'zabbix': " MYSQL_PW
    echo
    read -s -p "Confirm MySQL password: " MYSQL_PW2
    echo
    if [[ "$MYSQL_PW" == "$MYSQL_PW2" && -n "$MYSQL_PW" ]]; then
        break
    fi
    echo "Passwords do not match or are empty. Please try again."
done

# 2.2) Create Zabbix Database and User
echo "Creating Zabbix database..."
mysql -e "CREATE DATABASE IF NOT EXISTS zabbix CHARACTER SET utf8mb4 COLLATE utf8mb4_bin;" || { echo "Failed to create database"; exit 1; }
mysql -e "CREATE USER IF NOT EXISTS 'zabbix'@'localhost' IDENTIFIED BY '${MYSQL_PW}';" || { echo "Failed to create user"; exit 1; }
mysql -e "GRANT ALL PRIVILEGES ON zabbix.* TO 'zabbix'@'localhost';" || { echo "Failed to grant privileges"; exit 1; }
mysql -e "FLUSH PRIVILEGES;" || { echo "Failed to flush privileges"; exit 1; }

# 3) Check for and install Zabbix RPMs
if [ -d "/data/zabbix-pkgs" ] && [ "$(ls -A /data/zabbix-pkgs/*.rpm 2>/dev/null)" ]; then
    echo "Installing Zabbix packages..."
    dnf install -y /data/zabbix-pkgs/*.rpm
else
    echo "Warning: No Zabbix RPM packages found in /data/zabbix-pkgs/"
    echo "You'll need to install Zabbix packages manually later."
fi

# 4) Prompt for Zabbix Proxy configuration
declare -A cfg
while true; do
    read -p "ProxyMode (0=active, 1=passive): " cfg[ProxyMode]
    if [[ "${cfg[ProxyMode]}" == "0" || "${cfg[ProxyMode]}" == "1" ]]; then
        break
    fi
    echo "Please enter 0 for active or 1 for passive mode."
done

read -p "Zabbix Server IP/Hostname: " cfg[Server]
read -p "Proxy Hostname: " cfg[Hostname]

# 4.1) Generate zabbix_proxy.conf
echo "Creating Zabbix proxy configuration..."
cat > /etc/zabbix/zabbix_proxy.conf << CONF
# Zabbix Proxy Configuration
ProxyMode=${cfg[ProxyMode]}
Server=${cfg[Server]}
Hostname=${cfg[Hostname]}
TLSConnect=psk
TLSAccept=psk
TLSPSKFile=/data/zabbix/psk.key
TLSPSKIdentity=${cfg[Hostname]}
DBName=zabbix
DBUser=zabbix
DBPassword=${MYSQL_PW}
LogFile=/data/logs/zabbix_proxy.log
PidFile=/run/zabbix/zabbix_proxy.pid
SocketDir=/run/zabbix
DBSocket=/var/lib/mysql/mysql.sock
CONF

# Import Zabbix schema if proxy package is installed
if command -v zabbix_proxy >/dev/null 2>&1; then
    echo "Importing Zabbix database schema..."
    mysql -e "SET GLOBAL log_bin_trust_function_creators=1;"
    if [ -f "/usr/share/zabbix-sql-scripts/mysql/proxy.sql" ]; then
        mysql --default-character-set=utf8mb4 -uzabbix -p"${MYSQL_PW}" zabbix < /usr/share/zabbix-sql-scripts/mysql/proxy.sql
    elif [ -f "/usr/share/doc/zabbix-proxy-mysql/schema.sql.gz" ]; then
        zcat /usr/share/doc/zabbix-proxy-mysql/schema.sql.gz | mysql --default-character-set=utf8mb4 -uzabbix -p"${MYSQL_PW}" zabbix
    fi
    mysql -e "SET GLOBAL log_bin_trust_function_creators=0;"
fi

# 5) Configure Firewall
echo "Configuring firewall..."
set -euo pipefail

# Define private networks (RFC1918)
PRIVATE_NETS=(
    "10.0.0.0/8"
    "172.16.0.0/12"
    "192.168.0.0/16"
)

# Set default zone to drop
firewall-cmd --permanent --set-default-zone=drop

# Create internal zone for private networks
for net in "${PRIVATE_NETS[@]}"; do
    firewall-cmd --permanent --zone=internal --add-source="$net"
done

# Open required ports in internal zone
firewall-cmd --permanent --zone=internal --add-port=10051/tcp  # Zabbix Proxy
firewall-cmd --permanent --zone=internal --add-port=53/udp     # DNS
firewall-cmd --permanent --zone=internal --add-port=80/tcp     # HTTP (optional)
firewall-cmd --permanent --zone=internal --add-port=443/tcp    # HTTPS (optional)

# Block outbound to public IPs
for net in "${PRIVATE_NETS[@]}"; do
    firewall-cmd --permanent --direct --add-rule ipv4 filter OUTPUT 0 ! -d "$net" -j DROP
done

# Reload firewall
firewall-cmd --reload

echo "Firewall configured: inbound only from RFC1918, outbound to public IPs blocked."

# 6) Enable and start Zabbix Proxy if installed
if systemctl list-unit-files | grep -q zabbix-proxy; then
    echo "Starting Zabbix Proxy..."
    systemctl enable zabbix-proxy
    systemctl start zabbix-proxy
fi

# 7) Security lockdown
echo "Applying security settings..."
systemctl disable sshd 2>/dev/null || true
passwd -l root

# Lock non-system users except zabbixlog
for u in $(awk -F: '$3>=1000 && $1!="zabbixlog" {print $1}' /etc/passwd); do
    passwd -l "$u" 2>/dev/null || true
done

# 8) Display network information
echo -e "\n=== Network Interface Information ==="
echo "Configure DHCP reservations for these MAC addresses:"
ip -o link show | awk '/link\/ether/ {print $2": "$18}' | grep -v lo:

echo -e "\n=== Setup Complete ==="
echo "Zabbix Proxy appliance is ready!"
echo "Check service status with: systemctl status zabbix-proxy"

# Remove this script so it doesn't run again
rm -f /root/firstboot.sh
sed -i '/firstboot.sh/d' /etc/rc.d/rc.local

EOF

# 8.4) Make firstboot script executable and schedule it
chmod +x /root/firstboot.sh

# Create rc.local if it doesn't exist
if [ ! -f /etc/rc.d/rc.local ]; then
    cat > /etc/rc.d/rc.local << 'RCLOCAL'
#!/bin/bash
# This script will be executed *after* all the other init scripts.
# You can put your own initialization stuff in here if you don't
# want to do the full Sys V style init stuff.

touch /var/lock/subsys/local
RCLOCAL
fi

echo "/root/firstboot.sh" >> /etc/rc.d/rc.local
chmod +x /etc/rc.d/rc.local

# 8.5) Create directory for Zabbix packages
mkdir -p /data/zabbix-pkgs
chmod 755 /data/zabbix-pkgs

# 8.6) Set proper SELinux contexts if SELinux is enabled
if [ -f /etc/selinux/config ] && grep -q "SELINUX=enforcing\|SELINUX=permissive" /etc/selinux/config; then
    restorecon -R /data/ || true
fi

echo "Post-installation script completed successfully"

%end
