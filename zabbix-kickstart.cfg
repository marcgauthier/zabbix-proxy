#version=RHEL8
# Kickstart for AlmaLinux + Zabbix Proxy Appliance
# This file automates the entire installation, partitioning, network, and package setup.

# ================================
# 1) Installation Source & Locale
# ================================
install
cdrom                         # Use the installation media (DVD/ISO)
lang en_US.UTF-8              # System language
keyboard us                   # Keyboard layout
timezone UTC --isUtc          # Set system time to UTC

# ==================================
# 2) Network Configuration (DHCP)
# ==================================
# Activate all detected NICs with DHCP
network --bootproto=dhcp --device=link --activate
network --bootproto=dhcp --device=link --activate

# =====================================
# 5) Post-Install Customization Script
# =====================================
# The %post section runs immediately after the RPMs are installed but before the first reboot.
# We temporarily log all actions here to /root/ks-post.log for early troubleshooting because
# at this stage /data may not yet be fully mounted. Once the system boots, all runtime logs
# (syslog, journald) will reside in /data/logs.
%post --log=/root/ks-post.log --interpreter=/bin/bash

# --- 5.1) Prepare /data directories and bind-mount /var/log
#     Ensures ALL system and application logs reside in /data/logs (persisting after install)
mkdir -p /data/logs /data/zabbix-pkgs /data/zabbix
# Persist bind-mount in fstab so /var/log → /data/logs at every boot
cat >> /etc/fstab << FS
/data/logs /var/log none bind 0 0
FS
mount /var/log

# Ensure systemd-journald stores persistent logs under /data/logs/journal
mkdir -p /data/logs/journal
sed -i 's/#Storage=auto/Storage=persistent/' /etc/systemd/journald.conf
# --- 5.2) Copy custom Zabbix RPMs to data partition
# no longer require done via build script ! cp -r /build/zabbix-pkgs/* /data/zabbix-pkgs/

# --- 5.3) Create 'zabbixlog' user for read-only log access
useradd zabbixlog
# Grant read (+r) and directory traversal (+x), no write
setfacl -m u:zabbixlog:rxX /data/logs
# Ensure all future files inherit these ACLs
setfacl -R -m d:u:zabbixlog:rxX /data/logs

# --- 5.4) Create a first-boot script for interactive steps
cat > /root/firstboot.sh << 'EOF'
#!/bin/bash
# >>> FIRSTBOOT SCRIPT: runs once after first reboot <<<

# 1) Prompt for 32-char PSK key and verify
while true; do
  read -s -p "Enter 32-char PSK: " PSK; echo
  read -s -p "Confirm PSK: " PSK2; echo
  if [[ "$PSK" == "$PSK2" && ${#PSK} -eq 32 ]]; then break; fi
  echo "PSK mismatch or wrong length—please try again."
done
mkdir -p /data/zabbix
echo "$PSK" > /data/zabbix/psk.key
chmod 600 /data/zabbix/psk.key  # Secure the key file

# 2) Initialize and start MariaDB
systemctl enable mariadb
systemctl start mariadb
MYSQL_PW="password"  # Default DB password (modify if needed)

# 2.1) Create Zabbix Database and User
mysql -e "CREATE DATABASE zabbix CHARACTER SET utf8mb4 COLLATE utf8mb4_bin;"
mysql -e "CREATE USER 'zabbix'@'localhost' IDENTIFIED BY '${MYSQL_PW}';"
mysql -e "GRANT ALL ON zabbix.* TO 'zabbix'@'localhost';"
mysql -e "SET GLOBAL log_bin_trust_function_creators=1;"

# 2.2) Import initial Zabbix schema and data
zcat /usr/share/zabbix/sql-scripts/mysql/server.sql.gz \
  | mysql --default-character-set=utf8mb4 -uzabbix -p"${MYSQL_PW}" zabbix
# Disable log_bin_trust_function_creators post-import
mysql -e "SET GLOBAL log_bin_trust_function_creators=0;"

# 3) Install Zabbix Proxy RPMs from /data
dnf install -y /data/zabbix-pkgs/*.rpm

# 4) Prompt for Zabbix Proxy configuration details
declare -A cfg
read -p "ProxyMode (0=active,1=passive): " cfg[ProxyMode]
read -p "Zabbix Server IP/Hostname: " cfg[Server]
read -p "Proxy Hostname: " cfg[Hostname]

# 4.1) Generate zabbix_proxy.conf
echo "# Zabbix Proxy Configuration" > /etc/zabbix/zabbix_proxy.conf
for key in ProxyMode Server Hostname; do
  echo "$key=${cfg[$key]}" >> /etc/zabbix/zabbix_proxy.conf
done
cat >> /etc/zabbix/zabbix_proxy.conf << CONF
TLSConnect=psk
TLSAccept=psk
TLSPSKFile=/data/zabbix/psk.key
TLSPSKIdentity=${cfg[Hostname]}
DBName=zabbix
DBUser=zabbix
DBPassword=${MYSQL_PW}
CONF

# 5) Configure Firewall - only required ports open
# 5) Configure Firewall – block any public IP in or out
#
set -euo pipefail

#-- Define your private networks (RFC1918) --
PRIVATE_NETS=(
  "10.0.0.0/8"
  "172.16.0.0/12"
  "192.168.0.0/16"
)

# 5.1) Set the default zone to 'drop' so all inbound is dropped unless explicitly allowed
firewall-cmd --permanent --set-default-zone=drop

# 5.2) Create an 'internal' zone for RFC1918 sources and add each private net to it
for net in "${PRIVATE_NETS[@]}"; do
  firewall-cmd --permanent \
    --zone=internal \
    --add-source="$net"
done

# 5.3) In the 'internal' zone, open only the ports you need
firewall-cmd --permanent \
  --zone=internal \
  --add-port=10051/tcp   # Zabbix Proxy listener
firewall-cmd --permanent \
  --zone=internal \
  --add-port=53/udp      # DNS resolution
firewall-cmd --permanent \
  --zone=internal \
  --add-port=80/tcp      # HTTP (optional)
firewall-cmd --permanent \
  --zone=internal \
  --add-port=443/tcp     # HTTPS (optional)

# 5.4) Block any outbound traffic to non‐private (public) IPv4 addresses
#     We drop in the OUTPUT chain anything whose destination is NOT in our PRIVATE_NETS.
for net in "${PRIVATE_NETS[@]}"; do
  firewall-cmd --permanent \
    --direct \
    --add-rule ipv4 filter OUTPUT 0 \
      ! -d "$net" \
      -j DROP
done

# 5.5) Reload to apply all changes
firewall-cmd --reload

echo "Firewall configured: inbound only from RFC1918 on ports 10051,53,80,443; outbound to public IPs blocked."


# 6) Enable & start Zabbix Proxy
systemctl enable zabbix-proxy
systemctl start zabbix-proxy

# 7) Lock down SSH and local accounts
systemctl disable sshd                # Disable SSH server
passwd -l root                        # Lock root account
# Lock all non-system users except zabbixlog
for u in $(awk -F: '$3>=1000{print $1}' /etc/passwd); do
  [[ "$u" != "zabbixlog" ]] && passwd -l "$u"
done

# 8) Display MAC addresses for DHCP reservation
echo -e "\n=== Interface MAC Addresses ==="
ip -o link show | awk '/link\/ether/ {print $2": "$18}'
echo "Reserve these MACs in DHCP server."
EOF

# 5.5) Make firstboot script runnable and schedule it
chmod +x /root/firstboot.sh
echo "/root/firstboot.sh" >> /etc/rc.d/rc.local
chmod +x /etc/rc.d/rc.local
%end
