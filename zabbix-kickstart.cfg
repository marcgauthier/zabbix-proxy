# AlmaLinux + Zabbix Proxy Appliance Kickstart Configuration
# Compatible with livemedia-creator --make-iso
# This script creates a minimal AlmaLinux system optimized for Zabbix Proxy deployment

# ================================
# Basic System Configuration
# ================================

# Set system language and keyboard layout
lang en_US.UTF-8
keyboard us

# Configure timezone to UTC for consistent logging
timezone UTC --utc

# Network configuration - use DHCP with hostname prompt during installation
# Note: Hostname will be set interactively during installation
network --bootproto=dhcp --device=link --activate

# ================================
# Storage Configuration
# ================================

# Initialize disk - clear all existing partitions
zerombr
clearpart --all --initlabel

# Create partition layout
# Root partition: 4GB for system files
part /      --size=4096 --fstype=ext4
# Data partition: 90GB minimum, expandable for Zabbix data and logs
part /data  --size=92160 --fstype=ext4 --grow

# ================================
# User Authentication Setup
# ================================

# Lock root account for security (no direct root login)
rootpw --lock

# Create administrative user for system management
# Default password should be changed on first boot
user --name=zabbixlog --groups=wheel --password=changeme --plaintext

# ================================
# System Services Configuration
# ================================

# Enable essential services
services --enabled=NetworkManager,chronyd,firewalld

# Disable SSH for security (can be re-enabled if needed)
services --disabled=sshd

# ================================
# Package Selection
# ================================

%packages
# Core system packages
@core
@standard

# Essential system components
kernel
systemd
NetworkManager
firewalld
chrony

# Remove unnecessary packages to minimize footprint
-@guest-agents
-aic94xx-firmware*
-alsa-*
-btrfs-progs*
-ivtv-firmware
-iwl*firmware
-libertas*firmware
-plymouth*
%end

# ================================
# Pre-Installation Disk Check
# ================================

%pre --log=/tmp/ks-pre.log

echo "Starting pre-installation disk validation..." >> /tmp/ks-pre.log

# Function to convert size to MB
convert_to_mb() {
    local size=$1
    local unit=$(echo $size | sed 's/[0-9.]//g' | tr '[:lower:]' '[:upper:]')
    local number=$(echo $size | sed 's/[^0-9.]//g')
    
    case $unit in
        "GB"|"G")
            echo $(echo "$number * 1024" | bc -l | cut -d. -f1)
            ;;
        "TB"|"T")
            echo $(echo "$number * 1024 * 1024" | bc -l | cut -d. -f1)
            ;;
        "MB"|"M"|"")
            echo ${number%.*}
            ;;
        *)
            echo 0
            ;;
    esac
}

# Check available disk space
REQUIRED_SIZE_MB=94208  # 90GB + 4GB (root) = 94GB in MB
MIN_DATA_SIZE_MB=92160  # 90GB in MB

echo "Checking disk space requirements..." >> /tmp/ks-pre.log
echo "Required total space: ${REQUIRED_SIZE_MB}MB (94GB)" >> /tmp/ks-pre.log
echo "Required /data space: ${MIN_DATA_SIZE_MB}MB (90GB)" >> /tmp/ks-pre.log

# Get the largest available disk
LARGEST_DISK=""
LARGEST_SIZE=0

for disk in /dev/sd? /dev/vd? /dev/nvme?n? /dev/hd?; do
    if [ -b "$disk" ]; then
        # Get disk size using different methods
        if command -v lsblk >/dev/null 2>&1; then
            DISK_SIZE=$(lsblk -b -d -o SIZE "$disk" 2>/dev/null | tail -n1)
            DISK_SIZE_MB=$((DISK_SIZE / 1024 / 1024))
        elif [ -f /sys/block/$(basename $disk)/size ]; then
            SECTORS=$(cat /sys/block/$(basename $disk)/size)
            DISK_SIZE_MB=$((SECTORS * 512 / 1024 / 1024))
        else
            # Fallback method using fdisk
            DISK_SIZE_INFO=$(fdisk -l "$disk" 2>/dev/null | grep "Disk $disk" | head -n1)
            if echo "$DISK_SIZE_INFO" | grep -q "GB"; then
                DISK_SIZE_GB=$(echo "$DISK_SIZE_INFO" | grep -o '[0-9.]*GB' | head -n1 | sed 's/GB//')
                DISK_SIZE_MB=$(echo "$DISK_SIZE_GB * 1024" | bc -l | cut -d. -f1)
            elif echo "$DISK_SIZE_INFO" | grep -q "TB"; then
                DISK_SIZE_TB=$(echo "$DISK_SIZE_INFO" | grep -o '[0-9.]*TB' | head -n1 | sed 's/TB//')
                DISK_SIZE_MB=$(echo "$DISK_SIZE_TB * 1024 * 1024" | bc -l | cut -d. -f1)
            else
                continue
            fi
        fi
        
        echo "Found disk: $disk with size ${DISK_SIZE_MB}MB" >> /tmp/ks-pre.log
        
        if [ "$DISK_SIZE_MB" -gt "$LARGEST_SIZE" ]; then
            LARGEST_SIZE=$DISK_SIZE_MB
            LARGEST_DISK=$disk
        fi
    fi
done

echo "Largest disk found: $LARGEST_DISK with ${LARGEST_SIZE}MB" >> /tmp/ks-pre.log

# Validate disk size
if [ -z "$LARGEST_DISK" ]; then
    echo "ERROR: No suitable disk found!" >> /tmp/ks-pre.log
    echo "FATAL ERROR: No disk detected for installation"
    echo "Please ensure a disk of at least 94GB is available"
    exit 1
fi

if [ "$LARGEST_SIZE" -lt "$REQUIRED_SIZE_MB" ]; then
    LARGEST_SIZE_GB=$((LARGEST_SIZE / 1024))
    echo "ERROR: Insufficient disk space!" >> /tmp/ks-pre.log
    echo "FATAL ERROR: Disk too small for installation"
    echo "Available: ${LARGEST_SIZE_GB}GB"
    echo "Required: 94GB minimum (4GB root + 90GB data)"
    echo ""
    echo "Please use a disk with at least 94GB of space"
    exit 1
fi

# Calculate actual /data partition size after accounting for root partition
AVAILABLE_DATA_SIZE=$((LARGEST_SIZE - 4096))
AVAILABLE_DATA_GB=$((AVAILABLE_DATA_SIZE / 1024))

if [ "$AVAILABLE_DATA_SIZE" -lt "$MIN_DATA_SIZE_MB" ]; then
    echo "ERROR: Insufficient space for /data partition!" >> /tmp/ks-pre.log
    echo "FATAL ERROR: Insufficient space for /data partition"
    echo "Available for /data: ${AVAILABLE_DATA_GB}GB"
    echo "Required for /data: 90GB minimum"
    echo ""
    echo "Please use a disk with at least 94GB of space"
    exit 1
fi

echo "Disk validation successful!" >> /tmp/ks-pre.log
echo "Will create /data partition with ${AVAILABLE_DATA_GB}GB" >> /tmp/ks-pre.log

# Success message
echo "DISK VALIDATION PASSED"
echo "Target disk: $LARGEST_DISK (${LARGEST_SIZE_GB}GB total)"
echo "/data partition will be: ${AVAILABLE_DATA_GB}GB"
echo ""

%end

# ================================
# Post-Installation Configuration
# ================================

%post --log=/root/ks-post.log

echo "Starting post-installation configuration..." >> /root/ks-post.log

# --------------------------------
# Partition Size Verification
# --------------------------------

echo "Verifying partition sizes..." >> /root/ks-post.log

# Check /data partition size
DATA_SIZE_KB=$(df /data | tail -n1 | awk '{print $2}')
DATA_SIZE_GB=$((DATA_SIZE_KB / 1024 / 1024))

echo "/data partition size: ${DATA_SIZE_GB}GB" >> /root/ks-post.log

if [ "$DATA_SIZE_GB" -lt 85 ]; then
    echo "WARNING: /data partition smaller than expected (${DATA_SIZE_GB}GB)" >> /root/ks-post.log
    echo "This may impact Zabbix proxy performance" >> /root/ks-post.log
fi

# --------------------------------
# Directory Structure Setup
# --------------------------------

# Create essential directories for Zabbix proxy operation
mkdir -p /data/logs /data/zabbix-pkgs /data/zabbix

echo "Created directory structure" >> /root/ks-post.log

# --------------------------------
# Persistent Logging Configuration
# --------------------------------

# Configure /var/log to use persistent storage on /data partition
# This ensures logs survive system updates and reboots
cat >> /etc/fstab << 'EOF'
/data/logs /var/log none bind 0 0
EOF

# Preserve existing log files before setting up bind mount
if [ -d /var/log ] && [ "$(ls -A /var/log 2>/dev/null)" ]; then
    echo "Preserving existing log files..." >> /root/ks-post.log
    cp -a /var/log/* /data/logs/ 2>/dev/null || true
fi

# Mount the bind mount for immediate use
mount --bind /data/logs /var/log

# Configure systemd journal for persistent storage
mkdir -p /data/logs/journal
sed -i 's/#Storage=auto/Storage=persistent/' /etc/systemd/journald.conf

echo "Configured persistent logging" >> /root/ks-post.log

# --------------------------------
# User Permissions Setup
# --------------------------------

# Grant zabbixlog user read access to log files
# This allows log monitoring without full root privileges
setfacl -m u:zabbixlog:rX /data/logs
setfacl -R -m d:u:zabbixlog:rX /data/logs

echo "Configured user permissions for zabbixlog" >> /root/ks-post.log

# --------------------------------
# First Boot Script Creation
# --------------------------------

# Create interactive first-boot configuration script
# This handles security setup that requires user interaction
cat > /root/firstboot.sh << 'FIRSTBOOT'
#!/bin/bash

echo "==========================================="
echo "  Zabbix Proxy Appliance First Boot Setup"
echo "==========================================="
echo

# --------------------------------
# System Information Display
# --------------------------------

echo "System Information:"
echo "  Hostname: $(hostname)"
echo "  /data partition: $(df -h /data | tail -n1 | awk '{print $2}') available"
echo

# --------------------------------
# Hostname Configuration
# --------------------------------

echo "Setting system hostname..."
while true; do
    read -p "Enter hostname for this Zabbix Proxy: " HOSTNAME
    if [[ -n "$HOSTNAME" && "$HOSTNAME" =~ ^[a-zA-Z0-9][a-zA-Z0-9.-]*[a-zA-Z0-9]$ ]]; then
        hostnamectl set-hostname "$HOSTNAME"
        echo "Hostname set to: $HOSTNAME"
        break
    else
        echo "Invalid hostname. Please use only letters, numbers, dots, and hyphens."
    fi
done
echo

# --------------------------------
# PSK Key Configuration
# --------------------------------

echo "Configuring Zabbix PSK authentication..."
while true; do
    read -s -p "Enter 32-character PSK key: " PSK
    echo
    read -s -p "Confirm PSK key: " PSK2
    echo
    
    if [[ "$PSK" == "$PSK2" && ${#PSK} -eq 32 ]]; then
        # Save PSK key with secure permissions
        mkdir -p /data/zabbix
        echo "$PSK" > /data/zabbix/psk.key
        chmod 600 /data/zabbix/psk.key
        chown root:root /data/zabbix/psk.key
        echo "PSK key configured successfully"
        break
    else
        echo "ERROR: PSK keys don't match or wrong length. Must be exactly 32 characters."
        echo
    fi
done
echo

# --------------------------------
# Firewall Security Configuration
# --------------------------------

echo "Configuring firewall rules..."

# Set default zone to drop (deny all by default)
firewall-cmd --permanent --set-default-zone=drop

# Define private network ranges for internal communication
PRIVATE_NETS=("10.0.0.0/8" "172.16.0.0/12" "192.168.0.0/16")

# Allow internal networks access to required services
for net in "${PRIVATE_NETS[@]}"; do
    firewall-cmd --permanent --zone=internal --add-source="$net"
done

# Open required ports for Zabbix proxy operation
firewall-cmd --permanent --zone=internal --add-port=10051/tcp  # Zabbix proxy port
firewall-cmd --permanent --zone=internal --add-port=53/udp    # DNS queries
firewall-cmd --permanent --zone=internal --add-port=80/tcp    # HTTP
firewall-cmd --permanent --zone=internal --add-port=443/tcp   # HTTPS

# Apply firewall configuration
firewall-cmd --reload
echo "Firewall configured with secure defaults"
echo

# --------------------------------
# Final Security Hardening
# --------------------------------

echo "Applying final security settings..."

# Ensure SSH remains disabled
systemctl disable sshd 2>/dev/null || true

# Lock root account password
passwd -l root

echo "Security hardening complete"
echo

# --------------------------------
# System Information Display
# --------------------------------

echo "==========================================="
echo "  Network Interface Information"
echo "==========================================="

# Display MAC addresses for network interface identification
ip -o link show | awk '/link\/ether/ {print $2": "$18}' | grep -v lo: | while read line; do
    echo "  $line"
done

echo
echo "==========================================="
echo "  Final System Status"
echo "==========================================="
echo "Hostname: $(hostname)"
echo "/data partition: $(df -h /data | tail -n1 | awk '{print $2" ("$5" used)"}')"
echo

echo "==========================================="
echo "  Setup Complete!"
echo "==========================================="
echo "System is ready for Zabbix Proxy installation"
echo "Reboot to complete the configuration process"
echo

# --------------------------------
# Cleanup
# --------------------------------

# Remove this script to prevent re-execution
rm -f /root/firstboot.sh
sed -i '/firstboot.sh/d' /etc/rc.d/rc.local

FIRSTBOOT

# Make firstboot script executable
chmod +x /root/firstboot.sh

echo "Created first boot configuration script" >> /root/ks-post.log

# --------------------------------
# Schedule First Boot Script
# --------------------------------

# Ensure rc.local exists and is executable
touch /etc/rc.d/rc.local
chmod +x /etc/rc.d/rc.local

# Add firstboot script to run on first boot
echo "/root/firstboot.sh" >> /etc/rc.d/rc.local

echo "Post-installation configuration completed" >> /root/ks-post.log
echo "Final /data partition size: ${DATA_SIZE_GB}GB" >> /root/ks-post.log

%end
